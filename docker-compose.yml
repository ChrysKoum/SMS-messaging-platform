services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: sms-postgres
    environment:
      POSTGRES_USER: sms
      POSTGRES_PASSWORD: sms
      POSTGRES_DB: smsdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sms -d smsdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka with KRaft mode (no ZooKeeper needed)
  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    container_name: sms-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft essentials
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      # single-broker quorum
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      CLUSTER_ID: "MiJT2nKUTu-9YgNuJGoXXg"
      # listeners
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      # misc sane defaults
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Kafka UI for development/debugging
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: sms-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  # SMS Service
  sms-service:
    build: 
      context: ./service-sms
      dockerfile: Dockerfile
    container_name: sms-service
    environment:
      # Database configuration
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/smsdb
      QUARKUS_DATASOURCE_USERNAME: sms
      QUARKUS_DATASOURCE_PASSWORD: sms
      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Logging
      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_LOG_CATEGORY_COM_SMS_LEVEL: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Processor Service
  processor-service:
    build:
      context: ./service-processor
      dockerfile: Dockerfile
    container_name: processor-service
    environment:
      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # Callback configuration
      CALLBACK_URL: http://sms-service:8080/v1/internal/delivery-report
      # Processing simulation
      PROCESSING_MIN_DELAY_MS: 500
      PROCESSING_MAX_DELAY_MS: 2000
      SUCCESS_RATE: 0.8
      # Logging
      QUARKUS_LOG_LEVEL: INFO
      QUARKUS_LOG_CATEGORY_COM_PROCESSOR_LEVEL: DEBUG
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8082:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sms-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sms-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning

volumes:
  postgres_data:
  kafka_data:
  grafana_data:

networks:
  default:
    name: sms-network
